// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.web;

import edu.unlv.cs.rebelhotel.domain.Major;
import edu.unlv.cs.rebelhotel.domain.Student;
import edu.unlv.cs.rebelhotel.domain.Term;
import edu.unlv.cs.rebelhotel.domain.UserAccount;
import edu.unlv.cs.rebelhotel.domain.WorkEffort;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect StudentController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String StudentController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("student", Student.findStudent(id));
        model.addAttribute("itemId", id);
        return "students/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String StudentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("students", Student.findStudentEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Student.countStudents() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("students", Student.findAllStudents());
        }
        addDateTimeFormatPatterns(model);
        return "students/list";
    }
    
    @ModelAttribute("majors")
    public Collection<Major> StudentController.populateMajors() {
        return Major.findAllMajors();
    }
    
    @ModelAttribute("terms")
    public Collection<Term> StudentController.populateTerms() {
        return Term.findAllTerms();
    }
    
    @ModelAttribute("useraccounts")
    public Collection<UserAccount> StudentController.populateUserAccounts() {
        return UserAccount.findAllUserAccounts();
    }
    
    @ModelAttribute("workefforts")
    public Collection<WorkEffort> StudentController.populateWorkEfforts() {
        return WorkEffort.findAllWorkEfforts();
    }
    
}
