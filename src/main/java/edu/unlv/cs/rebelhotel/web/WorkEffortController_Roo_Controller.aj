// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.web;

import edu.unlv.cs.rebelhotel.domain.CatalogRequirement;
import edu.unlv.cs.rebelhotel.domain.Student;
import edu.unlv.cs.rebelhotel.domain.WorkEffort;
import edu.unlv.cs.rebelhotel.domain.enums.PayStatus;
import edu.unlv.cs.rebelhotel.domain.enums.Validation;
import edu.unlv.cs.rebelhotel.domain.enums.Verification;
import edu.unlv.cs.rebelhotel.domain.enums.VerificationType;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect WorkEffortController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.GET)
    public String WorkEffortController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("workefforts", WorkEffort.findWorkEffortEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) WorkEffort.countWorkEfforts() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("workefforts", WorkEffort.findAllWorkEfforts());
        }
        return "workefforts/list";
    }
    
    @ModelAttribute("catalogrequirements")
    public Collection<CatalogRequirement> WorkEffortController.populateCatalogRequirements() {
        return CatalogRequirement.findAllCatalogRequirements();
    }
    
    @ModelAttribute("students")
    public Collection<Student> WorkEffortController.populateStudents() {
        return Student.findAllStudents();
    }
    
    @ModelAttribute("paystatuses")
    public Collection<PayStatus> WorkEffortController.populatePayStatuses() {
        return Arrays.asList(PayStatus.class.getEnumConstants());
    }
    
    @ModelAttribute("validations")
    public Collection<Validation> WorkEffortController.populateValidations() {
        return Arrays.asList(Validation.class.getEnumConstants());
    }
    
    @ModelAttribute("verifications")
    public Collection<Verification> WorkEffortController.populateVerifications() {
        return Arrays.asList(Verification.class.getEnumConstants());
    }
    
    @ModelAttribute("verificationtypes")
    public Collection<VerificationType> WorkEffortController.populateVerificationTypes() {
        return Arrays.asList(VerificationType.class.getEnumConstants());
    }
    
    String WorkEffortController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
