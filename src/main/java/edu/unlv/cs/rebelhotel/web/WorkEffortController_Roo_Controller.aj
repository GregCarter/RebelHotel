// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.web;

import edu.unlv.cs.rebelhotel.domain.Student;
import edu.unlv.cs.rebelhotel.domain.WorkEffort;
import edu.unlv.cs.rebelhotel.domain.WorkRequirement;
import edu.unlv.cs.rebelhotel.domain.enums.PayStatus;
import edu.unlv.cs.rebelhotel.domain.enums.Validation;
import edu.unlv.cs.rebelhotel.domain.enums.Verification;
import edu.unlv.cs.rebelhotel.domain.enums.VerificationType;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect WorkEffortController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String WorkEffortController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("workeffort", WorkEffort.findWorkEffort(id));
        uiModel.addAttribute("itemId", id);
        return "workefforts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String WorkEffortController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("workefforts", WorkEffort.findWorkEffortEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) WorkEffort.countWorkEfforts() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("workefforts", WorkEffort.findAllWorkEfforts());
        }
        return "workefforts/list";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String WorkEffortController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        WorkEffort.findWorkEffort(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/workefforts";
    }
    
    @ModelAttribute("students")
    public Collection<Student> WorkEffortController.populateStudents() {
        return Student.findAllStudents();
    }
    
    @ModelAttribute("workefforts")
    public java.util.Collection<WorkEffort> WorkEffortController.populateWorkEfforts() {
        return WorkEffort.findAllWorkEfforts();
    }
    
    @ModelAttribute("workrequirements")
    public java.util.Collection<WorkRequirement> WorkEffortController.populateWorkRequirements() {
        return WorkRequirement.findAllWorkRequirements();
    }
    
    @ModelAttribute("paystatuses")
    public java.util.Collection<PayStatus> WorkEffortController.populatePayStatuses() {
        return Arrays.asList(PayStatus.class.getEnumConstants());
    }
    
    @ModelAttribute("validations")
    public java.util.Collection<Validation> WorkEffortController.populateValidations() {
        return Arrays.asList(Validation.class.getEnumConstants());
    }
    
    @ModelAttribute("verifications")
    public java.util.Collection<Verification> WorkEffortController.populateVerifications() {
        return Arrays.asList(Verification.class.getEnumConstants());
    }
    
    @ModelAttribute("verificationtypes")
    public java.util.Collection<VerificationType> WorkEffortController.populateVerificationTypes() {
        return Arrays.asList(VerificationType.class.getEnumConstants());
    }
    
    String WorkEffortController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
